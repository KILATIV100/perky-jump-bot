import os
import sqlite3
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, filters
from flask import Flask, request, jsonify

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("–ú–æ–¥—É–ª—å python-dotenv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Å–∏—Å—Ç–µ–º–∏.")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É
BOT_TOKEN = os.getenv("BOT_TOKEN", "8352289810:AAGP6zB_zMd9UMra1vxc-fgMv2m-hr8piG4")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö SQLite
def init_db():
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            max_height INTEGER DEFAULT 0,
            collected_beans INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ Web App ----
app = Flask(__name__)

@app.route('/save_stats', methods=['POST'])
def save_stats():
    """–û–±—Ä–æ–±–ª—è—î POST-–∑–∞–ø–∏—Ç –≤—ñ–¥ Web App —ñ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î."""
    try:
        data = request.json
        user_id = data.get('user_id')
        score = data.get('score')
        collected_beans = data.get('collected_beans')

        if not user_id or score is None or collected_beans is None:
            return jsonify({"status": "error", "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ"}), 400

        conn = sqlite3.connect('game_stats.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users SET 
            max_height = MAX(max_height, ?), 
            collected_beans = collected_beans + ? 
            WHERE user_id = ?
        ''', (score, collected_beans, user_id))
        conn.commit()
        conn.close()

        return jsonify({"status": "ok", "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞"}), 200

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({"status": "error", "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ ----
updater = Updater(BOT_TOKEN)
dispatcher = updater.dispatcher

# –ö–æ–º–∞–Ω–¥–∞ /start - –≤—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é
def start(update: Update, context: CallbackContext) -> None:
    # –û—Ç—Ä–∏–º—É—î–º–æ WEBAPP_URL –∑ environment variables
    WEBAPP_URL = os.getenv("WEBAPP_URL", "")
    if not WEBAPP_URL:
        update.message.reply_text('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBAPP_URL. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        return

    keyboard = [[
        InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL)),
        InlineKeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
    ], [
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
        InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç! –û–±–∏—Ä–∞–π, —â–æ —Ä–æ–±–∏—Ç–∏:', reply_markup=reply_markup)

    user_id = update.effective_user.id
    username = update.effective_user.username
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≥—Ä–∏ —Ç–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è. –ù–∞—à–∞ –º–µ—Ç–∞ - –ø—ñ–¥–Ω—è—Ç–∏—Å—è —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ. –ó–±–∏—Ä–∞–π—Ç–µ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ –æ—á–æ–∫!')

# –ö–æ–º–∞–Ω–¥–∞ /stats
def stats_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT max_height, collected_beans FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        max_height, collected_beans = result
        response = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n" \
                   f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞: **{max_height} –º**\n" \
                   f"–ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: **{collected_beans}**"
    else:
        response = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–µ—Ä—à—É –≥—Ä—É!"
    
    update.message.reply_markdown_v2(response)

# –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∑ Web App
def handle_webapp_data(update: Update, context: CallbackContext) -> None:
    pass

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("help", help_command))
dispatcher.add_handler(CommandHandler("stats", stats_command))
dispatcher.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è Flask ----
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram, –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ —ó—Ö —É dispatcher –±–æ—Ç–∞."""
    update = Update.de_json(request.get_json(force=True), updater.bot)
    dispatcher.process_update(update)
    return 'ok'

if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î
    init_db()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
    # Gunicorn –Ω–∞ Railway –∑–∞–ø—É—Å–∫–∞—î `app`
    # –¶–µ–π –±–ª–æ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ª–∏—à–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    app.run(host='0.0.0.0', port=8000)
