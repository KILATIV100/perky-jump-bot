import os
import sqlite3
import asyncio
from flask import Flask, request, jsonify
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            max_height INTEGER DEFAULT 0,
            collected_beans INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# ---- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not WEBAPP_URL:
        await update.message.reply_text('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBAPP_URL.')
        return
    
    keyboard = [[
        InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL)),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç! –û–±–∏—Ä–∞–π, —â–æ —Ä–æ–±–∏—Ç–∏:', reply_markup=reply_markup)
    
    user_id = update.effective_user.id
    username = update.effective_user.username
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    conn = sqlite3.connect('game_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT max_height, collected_beans FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        max_height, collected_beans = result
        response = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n" \
                   f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞: *{max_height} –º*\n" \
                   f"–ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: *{collected_beans}*"
    else:
        response = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–µ—Ä—à—É –≥—Ä—É!"
    
    await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    pass

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask —Ç–∞ –±–æ—Ç–∞ ----
app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("stats", stats_command))
application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

@app.route('/save_stats', methods=['POST'])
def save_stats():
    try:
        data = request.json
        user_id = data.get('user_id')
        score = data.get('score')
        collected_beans = data.get('collected_beans')
        
        if not all([user_id, score, collected_beans]):
            return jsonify({"status": "error", "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ"}), 400
        
        conn = sqlite3.connect('game_stats.db')
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
        cursor.execute('''
            UPDATE users SET 
            max_height = MAX(max_height, ?), 
            collected_beans = collected_beans + ? 
            WHERE user_id = ?
        ''', (score, collected_beans, user_id))
        conn.commit()
        conn.close()
        
        return jsonify({"status": "ok", "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞"}), 200
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({"status": "error", "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/', methods=['POST'])
async def webhook():
    update = Update.de_json(await request.get_json(), application.bot)
    await application.process_update(update)
    return 'ok'

init_db()
